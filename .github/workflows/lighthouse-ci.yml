name: Lighthouse CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.13.x
        lhci autorun
    
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lighthouse-results
        path: .lighthouseci/
        
    - name: Comment PR with results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Read the manifest
            const manifestPath = path.join('.lighthouseci', 'manifest.json');
            const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
            
            // Get the median run
            const medianRun = manifest.find(run => run.isRepresentativeRun);
            if (!medianRun) return;
            
            // Read the median report
            const reportPath = path.join('.lighthouseci', medianRun.jsonPath);
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            
            // Extract scores
            const scores = Object.entries(report.categories).map(([key, category]) => {
              const score = Math.round(category.score * 100);
              const emoji = score >= 90 ? '🟢' : score >= 50 ? '🟡' : '🔴';
              return `${emoji} ${category.title}: ${score}`;
            }).join('\n');
            
            // Create comment
            const comment = `## 🏃 Lighthouse Results
            
${scores}

[View Full Report](${medianRun.url || '#'})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.error('Failed to comment PR:', error);
          }

import { logger } from '@/utils/logger';
import { SubjectData } from '../blockTypes';

export interface SubjectSelectionResult {
  selectedSubject: SubjectData | null;
  subjectIndex: number;
}

export interface SelectionState {
  lastSubjectIndex: number;
  consecutiveCount: number;
}

// ALGORITMO ULTRA-SIMPLIFICADO: M√°ximo 2 blocos consecutivos + Round-Robin
export const selectNextSubject = (
  subjects: SubjectData[],
  selectionState: SelectionState,
  minDuration: number
): SubjectSelectionResult => {
  logger.info(`üéØ Sele√ß√£o ULTRA-SIMPLIFICADA:`, {
    lastSubject: subjects[selectionState.lastSubjectIndex]?.name,
    consecutiveCount: selectionState.consecutiveCount,
    availableSubjects: subjects.filter(s => s.remainingMinutes >= minDuration).map(s => s.name)
  });

  // Encontrar disciplinas dispon√≠veis
  const availableSubjects = subjects
    .map((subject, index) => ({ subject, index }))
    .filter(({ subject }) => subject.remainingMinutes >= minDuration);

  if (availableSubjects.length === 0) {
    logger.info(`‚ùå Nenhuma disciplina dispon√≠vel`);
    return {
      selectedSubject: null,
      subjectIndex: selectionState.lastSubjectIndex
    };
  }

  // Se s√≥ h√° uma disciplina, usar ela
  if (availableSubjects.length === 1) {
    const onlyAvailable = availableSubjects[0];
    logger.info(`‚û°Ô∏è √önica disciplina dispon√≠vel: ${onlyAvailable.subject.name}`);
    return {
      selectedSubject: onlyAvailable.subject,
      subjectIndex: onlyAvailable.index
    };
  }

  // REGRA PRINCIPAL: M√°ximo 2 blocos consecutivos
  const currentSubject = subjects[selectionState.lastSubjectIndex];
  const shouldForceChange = selectionState.consecutiveCount >= 2;

  if (shouldForceChange && currentSubject) {
    logger.info(`üîÑ FOR√áANDO mudan√ßa ap√≥s ${selectionState.consecutiveCount} blocos de ${currentSubject.name}`);
    
    // Buscar pr√≥xima disciplina diferente na sequ√™ncia circular
    let nextIndex = (selectionState.lastSubjectIndex + 1) % subjects.length;
    let attempts = 0;

    while (attempts < subjects.length) {
      const candidate = subjects[nextIndex];
      
      if (nextIndex !== selectionState.lastSubjectIndex && candidate.remainingMinutes >= minDuration) {
        logger.info(`‚úÖ Pr√≥xima disciplina encontrada: ${candidate.name} (√≠ndice ${nextIndex})`);
        return {
          selectedSubject: candidate,
          subjectIndex: nextIndex
        };
      }
      
      nextIndex = (nextIndex + 1) % subjects.length;
      attempts++;
    }
  }

  // ROUND-ROBIN SIMPLES: Pr√≥xima disciplina na sequ√™ncia
  let nextIndex = (selectionState.lastSubjectIndex + 1) % subjects.length;
  let attempts = 0;

  while (attempts < subjects.length) {
    const candidate = subjects[nextIndex];
    
    if (candidate.remainingMinutes >= minDuration) {
      logger.info(`üîÑ Round-robin: ${candidate.name} (√≠ndice ${nextIndex})`);
      return {
        selectedSubject: candidate,
        subjectIndex: nextIndex
      };
    }
    
    nextIndex = (nextIndex + 1) % subjects.length;
    attempts++;
  }

  // Fallback: primeira disciplina dispon√≠vel
  const firstAvailable = availableSubjects[0];
  logger.info(`‚ö†Ô∏è Fallback: ${firstAvailable.subject.name}`);
  return {
    selectedSubject: firstAvailable.subject,
    subjectIndex: firstAvailable.index
  };
};
